@page "/group"
@rendermode InteractiveServer
@using BlazorSignalRApp.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime



<PageTitle>Home</PageTitle>
<hr>

<ul id="Connections">
    @foreach (var user in connectedUsers)
    {
        <li>@user</li>
    }
</ul>

<div class="form-group">
    <label>
        Group:
        <input @bind="groupInput" />
    </label>
</div>


<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<hr />




@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private List<string> connectedUsers = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string? groupInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveGroupMessage", (user, message, roomId) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<string>>("ReceiveAllConnections", (connectedUser) =>
        {
            connectedUsers = connectedUser;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendGroupMessage", userInput, messageInput, groupInput);
            await hubConnection.SendAsync("GetAllConnections");
        }
    }
    private async Task GetAllConnections()
    {

        await hubConnection.SendAsync("SendGroupMessage", userInput, messageInput, groupInput);

    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}